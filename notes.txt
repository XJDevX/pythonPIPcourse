En este curso vemos como usar Python con GitHub, con esto podemos
gestionar mejor el tiempo al momento de trabajar en grupo.


Antes de iniciar con el curso debemos ejecutar unos comandos para
asi tener todas las librerias y paquetes que usaremos en el curso:
    -> sudo apt install -y build-essential libssl-dev libffi-dev python3-dev


Si queremos poner un buen readme.md podemos usar el generador
de codigos '.md' que se llama ("pandao")


Algo muy importante de este curso es que debemos aprender a usar
PIP (Python Package Index), este sirve para instalar paquetes de
codigos que podemos usar en nuestros proyectos:
    -Debemos poner en la terminal -> (pip install 'nombre del paquete')
        -> pip install matplotlib


Los ambientes virtuales sirver para cuando necesitamos instalar versiones diferentes en proyectos
y no queremos hacer interferencia con los modulos locales del programa o usuario de WSL
Para crear un ambiente virtual debemos poner el siguiente comando:
    -Debemos poner en la terminal -> python3 -m venv ("Nombre del entorno virtual")
        -> python3 -m venv env1

Los entornos virtuales no solo se deben crear sino que tambien se deben activar
y desactivar manualmente poniendo lo siguiente:
    -Debemos poner en la terminal -> source ("Nombre del entorno virtual)/bin/activate
        -> source env1/bin/activate

    -Debemos poner en la terminal para desactivar lo siguiente:
        -> deactivate


Para evitar instalar un monton de modulos y dependencias cuando entramos a un nuevo entorno
virtual se creo el "Requirements.txt" en este se guardan todas las dependencias que el
autor del proyecto haya usado para que todo fluya, para nosotros crear esto debemos:

    -Debemos instalar todas las dependencias que necesitemos para el proyecto
    -Luego debemos poner el siguiente comando -> pip3 freeze > requierments.txt

    -Y para instalar todos los modulos de "Requirements.txt" debemos poner:
        pip3 install -r requierments.txt

    -Cabe aclarar que antes de hacer lo anterior debemos activar el entorno virtual



<<---Haciendo requests con Python a servidores web--->>
Haremos peticiones a un servidor de practica de Platzi, para esto debemos instalar el modulo
"Requests" con -> pip3 install requests (Dentro de un entorno virtual)

Para hacer un request a la API anteriormente mencionada lo mas basico que debemos poner es:

    import requests

    def getCategories():
        r = requests.get("https://api.escuelajs.co/api/v1/categories")  #Link de la API
        print(r.status_code)    #Codigo de HTTPS
        print(r.text)   #Codigo o informacion obtenida
        print(type(r.text))     #Tipo de valor de la informacion
        categories = r.json()   #Convertir la informacion para leer con Python

        for category in categories:
            print(category['name'])     #Ciclo para conseguir el nombre de la categoria


<<-----Libreria de Pandas----->>
Con Pandas podemos hacer analisis de datos bastante grandes sin necesidad de "Inventarnos la
rueda de nuevo", podemos pasar de esto:

    #<<--Archivo para leer los datos de los paises del mundo-->>#
        import csv


        def readData(path):  #Funcion para leer los datos
        with open(path, "r") as csvfile:
            reader = csv.reader(csvfile, delimiter=",")
            header = next(reader)
            data = []
            for row in reader:
            i = zip(header, row)
            countryDict = {key: value for key, value in i}
            data.append(countryDict)

            return data


        def filterCountry(data, country):  #Funcion para filtrar el pais
        result = ""  #Solo para evitar errores
        try:
            result = list(
                filter(lambda item: item["Country/Territory"] == country, data))
        except:
            print("Ese pais no esta en la lista")

        return result


        def filterPopulation(country):
        population = {}
        populationKeys = []
        populationValues = []

        try:
            for key, value in country[0].items():
            if "Population" in key:
                population[key] = (value)
            populationKeys = list(population.keys())
            populationValues = list(population.values())

            populationKeys.pop()
            populationValues.pop()
        except:
            print("Error 404, informacion no encontrada")

        return populationKeys, populationValues


        countries = readData("data.csv")
        country = filterCountry(countries, "Colombia")
        pKeys, pValues = filterPopulation(country)

        pKeys.reverse()
        pValues.reverse()

        for item in range(len(pValues)):
        pValues[item] = int(pValues[item])

    #<<--Archivo para leer los datos de los paises del mundo-->>#
        import csv
        import pandas as pd

        df = pd.read_csv('data.csv)
        df = df[df['Continent] == South America]

        countries = df['Country'].values
        percentages = df['World Population Percentage'].values
        charts.generatePieChart(countries, percentages)


<<---Construir un web server--->>
Para hacer un servidor web propio debemos usar el modulo de FastAPI, para instalar
este modulo debemos poner (Dentro de un venv):
    -> pip3 install fastapi
    -> pip3 install "uvicorn[standard]"

Luego de esto debemos implementarlo a nuestro codigo, para esto debemos hacer:

    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/")
    def getList():
        return [1,2,3,4,5,6,7,8,9,10]


Para recibir el codigo en forma de HTML debemos poner:

    import store
    from fastapi import FastAPI
    from fastapi.responses import HTMLResponse

    app = FastAPI()

    @app.get("/contacts", response_class = HTMLResponse)
    def get_list():
        return """
            <h1>Hola soy una pagina</h1>
            <p>Hola soy un parrafo</p>
        """


<<---Utilizando Docker para aislar versiones de Python--->>
Asi como lo mencione, Docker es similiar a los Venv pero con la diferencia de que Docker aislara
a las versiones de Python por proyecto en vez de sus modulos. Para instalarlo debemos hacer:

    -Descargar el instalador desde https://docs.docker.com/desktop/install/windows-install/
    -Al instalarlo debemos asegurarnos que la opcion “Use the WSL 2 based engine” está activada

    -Luego en la sección “Resources > WSL Integration”, asegurarate que la opcion 
        “Enable integration with my default WSL distro”, este habilitada:


<<--Utilizando Docker con proyectos de Python-->>
Para utilizar Docker debemos hacer:

    -Crear un archivo llamado "Dockerfile" y poner:
        FROM python:3.9
        
        WORKDIR /charts     #Nombre de la carpeta
        COPY requirements.txt /charts/requirements.txt

        RUN pip install --upgrade pip
        RUN pip install --no-cache-dir --upgrade -r /charts/requirements.txt

        COPY . /charts    #Nombre de la carpeta

        CMD bash -c "while true; do sleep 1; done"

    -Luego de eso debemos crear otro archivo llamado "docker-compose.yml" y poner:
        services:
            charts-csv:     #Nombre del venv de Docker
                build:
                    context: .
                    dockerfile: Dockerfile
                volumes:
                 - .:/charts



Luego para activar el ambiente en Docker debemos poner lo siguiente en la terminal:
    -> docker-compose build
    -> docker-compose up -d
    -> docker-compose ps

Para entrar al entorno de Docker debemos poner:
    -> docker-compose exec charts-csv bash      #'charts-csv' es el del venv de Docker

Para salir del venv de Docker debemos poner: exit

<<---Dockerizando un WebServer--->>
Para hacerle un venv al WebServer debemos seguir los pasos anteriormente mencionados y modificar
algunas lineas de codigo para ejecutar el servidor Web:

    -En el archivo 'Dockerfile' lo debemos modificar a:
        FROM python:3.10

        WORKDIR /webserver
        COPY requirements.txt /webserver/requirements.txt

        RUN pip install --upgrade pip
        RUN pip install --no-cache-dir --upgrade -r /webserver/requirements.txt

        COPY . /webserver

        CMD ['uvicorn', 'main:app', '--host', '0.0.0.0', '--port', '80']

    -En el archivo 'docker-compose.yml' debemos modificar:
        services:
            web-server:
                build:
                    context: .
                    dockerfile: Dockerfile
                volumes:
                    - .:/charts
                ports:
                    - '80:80'